# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@4.1.1 # The Windows orb gives you everything you need to start using the Windows executor
  msix: circleci/microsoft-msix@1.1
  github-cli: circleci/github-cli@2.1.1


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test-linux:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:17.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: Install build dependencies
          command: |
            sudo apt update
            sudo apt install fakeroot rpm
      # Checkout and build JDDE
      - run:
          name: Build JDDE
          command: ci-scripts/jdde.sh
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
      - store_artifacts:
          path: target/packages/
          destination: linux

  build-and-test-windows:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    executor: win/server-2022

    steps:
      - checkout
      - run:
          name: Install JDK, Maven, WIX
          no_output_timeout: 30m
          command: |
            choco uninstall openjdk --all-versions
            Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
            choco install temurin --version=17.0.2.800 -y --params="/ADDLOCAL=FeatureMain,FeatureEnvironment,FeatureJarFileRunWith,FeatureJavaHome"
            Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
            choco install maven -y
            Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
            choco install wixtoolset -y
            Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
      - run:
          name: Info
          command: |
            ls -la /usr/bin
            ls -la /mingw64/bin
            which sh
            which bash
            which find
            which ls
            echo $PATH
          shell: bash.exe
      - run:
          name: Build JDDE
          command: bash ci-scripts/jdde.sh
      - run:
          name: Build
          command: bash -c 'mvn -B -DskipTests clean package'
      - run:
          name: Test
          command: bash -c 'mvn test'
      - store_artifacts:
          path: target/packages/
          destination: windows

  build-and-test-macos:
    macos:
      xcode: 14.1.0
    steps:
      - checkout
      - run:
          name: Brew
          command: |
            # set -x
            # export HOMEBREW_NO_AUTO_UPDATE=1
            # brew list
            # curl -LO https://raw.githubusercontent.com/Homebrew/homebrew-cask/4565865e9d7c3d3018ee8aa67803ea68c54dde86/Casks/temurin.rb
            # brew install --cask temurin.rb
            # brew install --ignore-dependencies maven
            curl -LO https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.5%2B8/OpenJDK17U-jdk_x64_mac_hotspot_17.0.5_8.pkg
            sudo installer -pkg ./OpenJDK17U-jdk_x64_mac_hotspot_17.0.5_8.pkg -target /Applications
            curl -LO https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz
            tar xzf apache-maven-3.8.8-bin.tar.gz
            sudo mkdir -p /usr/local/bin/
            sudo ln -s `pwd`/apache-maven-3.8.8/bin/mvn /usr/local/bin/mvn
            java -version
            mvn -version
      - run:
          name: Build JDDE
          command: ci-scripts/jdde.sh
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      - run:
          name: Test
          command: mvn test
      - store_artifacts:
          path: target/packages/
          destination: macos

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-deliverables: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test-linux
      - build-and-test-windows
      - build-and-test-macos
